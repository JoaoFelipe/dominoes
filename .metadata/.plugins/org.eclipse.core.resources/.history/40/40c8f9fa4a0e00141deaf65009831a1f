/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package boundary;

import domain.Dominoes;
import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.graph.DelegateForest;
//import edu.uci.ics.jung.graph.DirectedGraph;
import edu.uci.ics.jung.graph.UndirectedGraph;
import edu.uci.ics.jung.graph.UndirectedSparseMultigraph;
import edu.uci.ics.jung.graph.Forest;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.EdgeShape;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Paint;
import javafx.embed.swing.SwingNode;
import javafx.scene.layout.Pane;
import org.apache.commons.collections15.Factory;
import org.apache.commons.collections15.Transformer;
import org.apache.commons.collections15.functors.ConstantTransformer;

/**
 *
 * @author Daniel
 */
public class GraphPane extends Pane {

    /**
     * the graph
     */
    Forest<String, Integer> graph;

    Factory<UndirectedGraph<String, Integer>> graphFactory
            = new Factory<UndirectedGraph<String, Integer>>() {

                public UndirectedGraph<String, Integer> create() {
                    return new UndirectedSparseMultigraph<String, Integer>();
                }
            };

//    Factory<Tree<String, Integer>> treeFactory
//            = new Factory<Tree<String, Integer>>() {
//
//                public Tree<String, Integer> create() {
//                    return new DelegateTree<String, Integer>(graphFactory);
//                }
//            };
    Factory<Integer> edgeFactory = new Factory<Integer>() {
        int i = 0;

        public Integer create() {
            return i++;
        }
    };

    Factory<String> vertexFactory = new Factory<String>() {
        int i = 0;

        public String create() {
            return "V" + i++;
        }
    };

    /**
     * the visual component and renderer for the graph
     */
    VisualizationViewer<String, Integer> vv;

    CircleLayout<String, Integer> treeLayout;

    public GraphPane(Dominoes domino) {

        if (!isAValidDomino(domino)) {
            throw new IllegalArgumentException("Invalid argument.\nThe Domino parameter not is valid");
        }
        // create a simple graph for the demo
        graph = new DelegateForest<String, Integer>();

        createTree(domino);

//        treeLayout = new TreeLayout<String, Integer>(graph);
        treeLayout = new CircleLayout<>(graph);

        vv = new VisualizationViewer<String, Integer>(treeLayout, new Dimension(600, 600));

        vv.getRenderContext().setVertexFillPaintTransformer(new Transformer<String, Paint>() {
            public Paint transform(String i) {
                return Color.BLACK;
            }
        });
        vv.setBackground(Color.white);
        vv.getRenderContext().setEdgeShapeTransformer(new EdgeShape.Line());
        vv.getRenderContext().setVertexLabelTransformer(new ToStringLabeller());
        // add a listener for ToolTips
        vv.getRenderContext().setArrowFillPaintTransformer(new ConstantTransformer(Color.lightGray));

        final GraphZoomScrollPane panel = new GraphZoomScrollPane(vv);

        final DefaultModalGraphMouse graphMouse = new DefaultModalGraphMouse();

        vv.setGraphMouse(graphMouse);

        SwingNode s = new SwingNode();
        s.setContent(panel);
        this.getChildren().add(s);

    }

    private void createTree(Dominoes domino) {
        for (int i = 0; i < domino.getMat().length; i++) {
            graph.addVertex(domino.getIdCol() + " " + i);
            for (int j = 0; j < i; j++) {
                if (graph.addEdge(edgeFactory.create(), domino.getIdCol() + " " + i, domino.getIdCol() + " " + j)) {
                    graph.addEdge(edgeFactory.create(), domino.getIdCol() + " " + j, domino.getIdCol() + " " + i);
                }

            }

        }

    }

    private boolean isAValidDomino(Dominoes domino) {
        return ((domino.getWidth() == domino.getWidth())
                && (domino.getIdRow().equals(domino.getIdCol()))
                && (domino.getMat().length == domino.getMat()[0].length));
    }

}
